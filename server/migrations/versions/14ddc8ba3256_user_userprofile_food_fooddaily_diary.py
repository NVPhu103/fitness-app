"""user, userprofile, food, fooddaily, diary

Revision ID: 14ddc8ba3256
Revises: 
Create Date: 2023-04-09 20:32:35.408140

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '14ddc8ba3256'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('diary',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date', sa.DATE(), nullable=True),
    sa.Column('breakfast_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('lunch_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('dining_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('maximum_calorie_intake', sa.Integer(), nullable=True),
    sa.Column('total_calorie_intake', sa.Integer(), nullable=True),
    sa.CheckConstraint('maximum_calorie_intake >= 1000', name=op.f('ck_diary_maximum_calorie_intake')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_diary'))
    )
    op.create_index(op.f('ix_diary_date'), 'diary', ['date'], unique=False)
    op.create_index(op.f('ix_diary_id'), 'diary', ['id'], unique=False)
    op.create_index(op.f('ix_diary_user_id'), 'diary', ['user_id'], unique=False)
    op.create_table('food',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('unit', sa.Enum('BOWL', 'CUP', 'GRAM', name='foodunit'), nullable=False),
    sa.Column('calories', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='foodstatus'), nullable=False),
    sa.CheckConstraint('calories > 0', name=op.f('ck_food_calories')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_food'))
    )
    op.create_index(op.f('ix_food_id'), 'food', ['id'], unique=False)
    op.create_index(op.f('ix_food_name'), 'food', ['name'], unique=True)
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('email', name=op.f('uq_user_email'))
    )
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('food_daily',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('meal_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('food_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.CheckConstraint('quantity > 1', name=op.f('ck_food_daily_quantity')),
    sa.ForeignKeyConstraint(['food_id'], ['food.id'], name=op.f('fk_food_daily_food_id_food')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_food_daily')),
    sa.UniqueConstraint('meal_id', 'food_id', name=op.f('uq_food_daily_meal_id'))
    )
    op.create_index('(no name)', 'food_daily', ['food_id'], unique=False)
    op.create_index(op.f('ix_food_daily_food_id'), 'food_daily', ['food_id'], unique=False)
    op.create_index(op.f('ix_food_daily_id'), 'food_daily', ['id'], unique=False)
    op.create_index(op.f('ix_food_daily_meal_id'), 'food_daily', ['meal_id'], unique=False)
    op.create_table('user_profile',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('current_weight', sa.Float(), nullable=False),
    sa.Column('desired_weight', sa.Float(), nullable=False),
    sa.Column('height', sa.Float(), nullable=False),
    sa.Column('_year_of_birth', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='userprofilestatus'), nullable=False),
    sa.Column('activity_level', sa.Enum('NOT_VERY_ACTIVE', 'LIGHTLY_ACTIVE', 'ACTIVE', 'VERY_ACTIVE', name='userprofileactivitylevel'), nullable=False),
    sa.Column('maximum_calorie_intake', sa.Integer(), nullable=False),
    sa.CheckConstraint('current_weight != desired_weight', name=op.f('ck_user_profile_current_weight')),
    sa.CheckConstraint('maximum_calorie_intake >= 1000', name=op.f('ck_user_profile_maximum_calorie_intake')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_profile_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_profile'))
    )
    op.create_index(op.f('ix_user_profile_id'), 'user_profile', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_profile_id'), table_name='user_profile')
    op.drop_table('user_profile')
    op.drop_index(op.f('ix_food_daily_meal_id'), table_name='food_daily')
    op.drop_index(op.f('ix_food_daily_id'), table_name='food_daily')
    op.drop_index(op.f('ix_food_daily_food_id'), table_name='food_daily')
    op.drop_index('(no name)', table_name='food_daily')
    op.drop_table('food_daily')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_food_name'), table_name='food')
    op.drop_index(op.f('ix_food_id'), table_name='food')
    op.drop_table('food')
    op.drop_index(op.f('ix_diary_user_id'), table_name='diary')
    op.drop_index(op.f('ix_diary_id'), table_name='diary')
    op.drop_index(op.f('ix_diary_date'), table_name='diary')
    op.drop_table('diary')
    # ### end Alembic commands ###
